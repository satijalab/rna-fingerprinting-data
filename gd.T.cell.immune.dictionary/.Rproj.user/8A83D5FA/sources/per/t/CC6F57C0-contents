library(dplyr)
library(ggplot2)
library(pheatmap)
source('Clean_methods.R')

# Sets up CPA-Perturb-seq data for benchmark by:
## (0) filtering cells
## (1) running Mixscape on the data
## (2) running SCTransform on both sets
## (3) randomly renaming some NT cells from the test set (replicate 2)
## (4) renaming 'NT' cells as 'control' cells
data_setup <- function(data) {
  data <- JoinLayers(data)
  data[['percent.mt']] <- PercentageFeatureSet(data,pattern='^MT-')
  data <- data[,data$percent.mt<15&data$nCount_GUIDE>100]
  data <- NormalizeData(data)
  data <- FindVariableFeatures(data)
  data <- ScaleData(data)
  data <- RunPCA(data)
  data <- CalcPerturbSig(data,assay='RNA',slot='data',gd.class='target_gene',
                         nt.cell.class='NT',reduction='pca',ndims=40,
                         num.neighbors=20,split.by='replicate',
                         new.assay.name='PRTB')
  DefaultAssay(data) <- 'PRTB'
  VariableFeatures(data) <- VariableFeatures(data[["RNA"]])
  data <- ScaleData(data, do.scale = F, do.center = T)
  data <- RunMixscape(data,assay='PRTB',slot='scale.data',labels='target_gene',
                      nt.class.name='NT',min.de.genes=5,iter.num=10,de.assay='RNA',
                      verbose=F,prtb.type='KO')
  DefaultAssay(data) <- 'RNA'
  
  rep1 <- data[,data$replicate=='R1']
  rep1 <- SCTransform(rep1,return.only.var.genes=F)
  rep1$target_gene[rep1$target_gene=='NT'] <- 'control'
  
  rep2 <- data[,data$replicate=='R2']
  rep2 <- SCTransform(rep2,return.only.var.genes=F)
  rep2$target_gene[sample(which(rep2$target_gene=='NT'),
                          0.2*sum(rep2$target_gene=='NT'))] <- 'NP'
  rep2$target_gene[rep2$target_gene=='NT'] <- 'control'
  
  return(list(rep1,rep2))
}

# Create heatmap of results for sample-level classification
create_sample_heatmap <- function(sample_out,Lambdas) {
  top_cs <- sapply(1:length(sample_out$top_credible_set),function(x) {
    init <- rep(0,ncol(Lambdas)+1)
    names(init) <- c(colnames(Lambdas),'unassigned')
    prt <- strsplit(sample_out$top_credible_set[x],',')[[1]]
    init[prt[1]] <- 1
    if (length(prt)>1) {
      init[prt[2:length(prt)]] <- 0.5
    }
    init
  })
  colnames(top_cs) <- names(sample_out$top_credible_set)
  top_cs.m <- reshape2::melt(top_cs)
  
  represented_prts <- intersect(colnames(Lambdas),names(sample_out$top_credible_set))
  hc <- heatmap(top_cs[,represented_prts])
  ord <- represented_prts[hc$colInd]
  if (sum(!colnames(Lambdas)%in%names(sample_out$top_credible_set))>0) {
    ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%names(sample_out$top_credible_set)])
  }
  
  print(ggplot(top_cs.m,aes(x=factor(Var2,levels=c(ord,'NP')),
                           y=factor(Var1,levels=c(ord,'unassigned')),
                           fill=factor(value)))+
    geom_tile()+theme_classic(base_size=12)+
    xlab('Query')+ylab('Perturbation')+
    scale_fill_discrete(breaks=c(0,0.5,1),
                        type=c('white','#A08CC2','blue'))+
    theme(legend.position='none',axis.text.x=element_text(angle=90)))
}

# Compute metrics for single-cell classification
compute_cell_metrics <- function(rep2,cell_out) {
  labels <- rep2$target_gene[rep2$target_gene!='control']
  first <- cell_out$top_perturbation
  unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,',')[[1]])
  top_len <- sapply(unroll_top,function(x) {
    if (all(x=='unassigned')) { 
      0
    } else {
      length(x)
    }
  })
  num_cs <- sapply(1:length(cell_out$full_assignment),function(x) {
    if (cell_out$full_assignment[x]=='unassigned') {
      0
    } else {
      stringr::str_count(cell_out$full_assignment[x],';')+1
    }
  })
  right <- sapply(1:length(labels),function(x) labels[x]%in%unroll_top[[x]])
  
  prts <- unique(labels[labels!='NP'])
  sens <- sapply(prts,function(x) {
    sub <- first[labels==x]
    sum(sub==x)
  })/sapply(prts,function(x) sum(labels==x))
  prec <- sapply(prts,function(x) {
    sum(labels==x & first==x)/sum(first==x)
  })
  np_rate <- sum(labels=='NP' & first=='unassigned')/sum(labels=='NP')
  cs_sens <- sapply(prts,function(x) {
    sum(sapply(unroll_top[labels==x],function(i) x %in% i))
  })/sapply(prts,function(x) sum(labels==x))
  cs_len <- sapply(prts,function(x) {
    median(top_len[labels==x & top_len!=0])
  })
  num_cs_per_perturb <- sapply(prts,function(x) {
    sum(num_cs[labels==x & num_cs!=0]==1)/sum(labels==x & num_cs!=0)
  })
  return(list(sens=sens,prec=prec,np_rate=np_rate,cs_sens=cs_sens,
              cs_len=cs_len,num_cs_per_perturb=num_cs_per_perturb))
}

# Create heatmap of results for cell-level classification
create_cell_heatmap <- function(rep2,cell_out,Lambdas,order=NULL,excluded=NULL) {
  labels <- rep2$target_gene[rep2$target_gene!='control']
  unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
  our_res <- sapply(unroll_top,function(x) {
    ind <- rep(0,ncol(Lambdas)+1)
    names(ind) <- c(colnames(Lambdas),'unassigned')
    ind[x[1]] <- 1
    if (length(x)>1) {
      ind[x[2:length(x)]] <- 0.5
    }
    ind
  })
  colnames(our_res) <- names(labels)
  
  represented_prts <- intersect(colnames(Lambdas),unique(labels))
  hc <- hclust(dist(t(Lambdas[,represented_prts])))
  ord <- represented_prts[hc$order]
  if (sum(!colnames(Lambdas)%in%labels)>0) {
    ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%labels])
  }
  
  cell_order <- unlist(sapply(c(ord,'NP'),function(perturb) {
    cell_names <- colnames(our_res)[labels==perturb]
    cell_names[order(rep2$mixscape_class_p_ko[cell_names],decreasing=T)]
  }))
  p1 <- pheatmap(our_res[order(factor(rownames(our_res),
                                      levels=c(ord,'unassigned'))),
                   cell_order],
           treeheight_col=0,treeheight_row=0,
           cluster_rows=F,doTranspose=T,show_colnames=F,cluster_cols=F,
           color=colorRampPalette(c('#F4F4F4','#A08CC2','#3944BC'))(3),
           annotation_col=data.frame(label=labels[cell_order],
                                     mixscape=rep2$mixscape_class_p_ko[cell_order],
                                     row.names=cell_order),
           silent=T)
  
  if (is.null(order)) {
    subset_prts <- setdiff(colnames(Lambdas),excluded)
    hc <- hclust(dist(t(Lambdas[,subset_prts])))
    ord <- subset_prts[hc$order]
    if (sum(!colnames(Lambdas)%in%subset_prts)>0) {
      ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%subset_prts])
    }
  } else {
    ord <- order[[1]]
    subset_prts <- order[[2]]
  }
  
  cell_order <- unlist(sapply(c(ord,'NP'),function(perturb) {
    cell_names <- colnames(our_res)[labels==perturb]
    cell_names[order(rep2$mixscape_class_p_ko[cell_names],decreasing=T)]
  }))
  cells_to_keep <- cell_order[which(labels[cell_order]%in%subset_prts)]
  p2 <- pheatmap(our_res[order(factor(rownames(our_res),
                                      levels=c(ord,'unassigned'))),
                         cells_to_keep],
                 treeheight_col=0,treeheight_row=0,
                 cluster_rows=F,doTranspose=T,show_colnames=F,cluster_cols=F,
                 color=colorRampPalette(c('#F4F4F4','#3944BC'))(3),
                 annotation_col=data.frame(label=labels[cells_to_keep],
                                           mixscape=rep2$mixscape_class_p_ko[cells_to_keep],
                                           row.names=cells_to_keep),
                 silent=T)
  
  return(list(p1,p2,list(ord,subset_prts)))
}

# Create expression heatmaps
create_expr_heatmap <- function(rep1,rep2,cell_out,Lambdas) {
  labels <- rep2$target_gene[rep2$target_gene!='control']
  represented_prts <- intersect(colnames(Lambdas),unique(labels))
  hc <- heatmap(abs(cor(Lambdas[,represented_prts])))
  ord <- represented_prts[hc$rowInd]
  if (sum(!colnames(Lambdas)%in%labels)>0) {
    ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%labels])
  }
  rep1$target_gene <- factor(rep1$target_gene,levels=c(ord,'control'))
  
  Idents(rep1) <- rep1$target_gene
  markers <- FindAllMarkers(rep1)
  markers <- markers %>% group_by(cluster) %>% 
    filter(avg_log2FC>0 & cluster!='control') %>%
    dplyr::slice(1:10)
  markers <- unique(markers$gene)
  markers <- intersect(markers,rownames(GetAssayData(rep1,slot='scale.data')))
  markers <- intersect(markers,rownames(GetAssayData(rep2,slot='scale.data')))
  
  rep2$assign <- 'unassigned'
  rep2$assign[names(cell_out$top_perturbation)] <- cell_out$top_perturbation
  tab <- table(rep2$assign)
  lbf <- cell_out$top_lbf
  rep2_plot <- rep2[,rep2$assign!='unassigned'&rep2$assign%in%names(tab[tab>=100])]
  rep2_plot$assign <- factor(rep2_plot$assign,levels=intersect(ord,unique(rep2_plot$assign)))
  g1 <- DoHeatmap(rep2_plot,markers,group.by='assign',size=3,raster=FALSE,
                  cells=colnames(rep2_plot)[order(lbf[colnames(rep2_plot)],decreasing=T)])+
    theme(axis.text.y=element_blank(),legend.position='bottom',
          legend.direction='horizontal')+guides(color='none')
  
  unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
  right <- sapply(1:length(labels),function(x) 
    if (labels[x]%in%unroll_top[[x]]) {
      'correct'
    } else {
      'incorrect'
    })
  right[cell_out$top_perturbation=='unassigned'] <- 'unassigned'
  rep2$status <- 'control'
  rep2$status[rep2$target_gene!='control'] <- right
  rep2$status <- factor(rep2$status,levels=c('correct','incorrect','unassigned','control'))
  rep1$target_gene <- as.character(rep1$target_gene)
  g_perturbs <- lapply(unique(as.character(rep2_plot$assign)),function(p) {
    p_markers <- FindMarkers(rep1,ident.1=p,ident.2='control',group.by='target_gene')
    p_markers <- rownames(p_markers)[1:25][order(p_markers$avg_log2FC[1:25])]
    p_markers <- intersect(p_markers,rownames(GetAssayData(rep1,slot='scale.data')))
    p_markers <- intersect(p_markers,rownames(GetAssayData(rep2,slot='scale.data')))
    DoHeatmap(rep2,p_markers,group.by='status',raster=F,
              cells=colnames(rep2)[rep2$target_gene%in%c('control',p)],label=F)+
      theme(legend.position='bottom',legend.direction='horizontal')+guides(color='none')
  })
  names(g_perturbs) <- unique(as.character(rep2_plot$assign))
  
  return(list(g1,g_perturbs))
}

# Plot example of credible sets 
credible_set_heatmap <- function(rep1,rep2,cell_out,p1,p2) {
  m1 <- FindMarkers(rep1,ident.1=c(p1,p2),ident.2='control',group.by='target_gene')
  m1 <- m1[m1$avg_log2FC>0,]
  m1 <- rownames(m1)[1:20]
  
  p1_only <- FindMarkers(rep1,ident.1=p1,ident.2='control',group.by='target_gene')
  p1_only <- p1_only[p1_only$avg_log2FC>0 & p1_only$p_val_adj<0.05,]
  p2_only <- FindMarkers(rep1,ident.1=p2,ident.2='control',group.by='target_gene')
  p2_only <- p2_only[p2_only$avg_log2FC>0 & p2_only$p_val_adj<0.05,]
  
  m2 <- FindMarkers(rep1,ident.1=p1,ident.2=p2,group.by='target_gene')
  m2_1 <- m2[rownames(m2)%in%rownames(p1_only)&m2$avg_log2FC>0,]
  m2_1 <- rownames(m2_1)[1:10][order(m2_1$avg_log2FC[1:10])]
  m2_2 <- m2[rownames(m2)%in%rownames(p2_only)&m2$avg_log2FC<0,]
  m2_2 <- rownames(m2_2)[1:10][order(m2_2$avg_log2FC[1:10])]
  genes_to_plot <- unique(c(p1,p2,m1,m2_1,m2_2))
  
  cells_to_include <- c(colnames(rep2)[rep2$target_gene%in%c(p1,p2)],
                        sample(colnames(rep2)[rep2$target_gene=='control'],50))
  rep2_sub <- rep2[,cells_to_include]
  rep2_sub$assign <- dplyr::case_when(is.na(cell_out$top_perturbation[colnames(rep2_sub)]) ~ 'control',
                                      cell_out$top_perturbation[colnames(rep2_sub)]=='unassigned'~'unassigned',
                                      cell_out$top_credible_set[colnames(rep2_sub)]==p1~p1,
                                      cell_out$top_credible_set[colnames(rep2_sub)]==p2~p2,
                                      cell_out$top_credible_set[colnames(rep2_sub)]%in%c(paste0(p1,',',p2),paste0(p2,',',p1),
                                                         paste0(p1,'_',p2),paste0(p2,'_',p1))~'both',
                                      TRUE~'other')
  rep2_sub <- rep2_sub[,rep2_sub$assign!='other']
  rep2_sub$assign <- factor(rep2_sub$assign,levels=c(p1,'both',p2,'unassigned','control'))
  g1 <- DoHeatmap(rep2_sub,genes_to_plot,group.by='assign',size=3,raster=F)+
    theme(legend.position='top',legend.direction='horizontal')+guides(color='none')
  
  true <- rep2_sub$target_gene
  cells <- c(colnames(rep2_sub)[rep2_sub$assign==p1],
             colnames(rep2_sub)[rep2_sub$assign=='both'],
             colnames(rep2_sub)[rep2_sub$assign==p2],
             colnames(rep2_sub)[rep2_sub$assign=='unassigned'],
             colnames(rep2_sub)[rep2_sub$assign=='control'])
  g2 <- ggplot(data=data.frame(cells=cells,true=true[cells]),
               aes(x=factor(cells,levels=cells),y=1,fill=true))+
    geom_tile()+theme_classic(base_size=12)+
    scale_fill_manual(values=c('white','#619CFF','#F8766D'))+
    theme(axis.line=element_blank(),axis.ticks=element_blank(),
          axis.text=element_blank(),axis.title.x=element_blank(),
          legend.position='none',
          axis.title.y=element_text(size=8,angle=0,vjust=0.5))+ylab('True')
  return(cowplot::plot_grid(g1,g2,
                            ncol=1,align='v',rel_heights=c(15,1),axis='lr'))
}

# Compare target gene to assignment
target_gene_plot <- function(rep2,cell_out) {
  target_genes <- unique(rep2$target_gene[!rep2$target_gene%in%c('control','NP')])
  plots <- lapply(target_genes,function(p) {
    pick <- which(cell_out$top_credible_set==p)
    lbf_pick <- cell_out$top_lbf[pick]
    if (p %in% rownames(GetAssayData(rep2,slot='scale.data')) & length(lbf_pick)>100) {
      target <- GetAssayData(rep2,slot='scale.data')[p,names(cell_out[[1]])[pick]]
      quantiles <- cut(lbf_pick,quantile(lbf_pick,seq(0,1,by=.1)))
      quantiles[is.na(quantiles)] <- levels(quantiles)[1]
      return(ggplot(data=data.frame(lbf_bin=quantiles,target_expr=target),aes(x=lbf_bin,y=target_expr))+
        geom_boxplot()+theme_classic(base_size=12)+
          xlab('log10 Bayes factor decile')+ylab('Target gene expression')+
        ggtitle(paste0(p,'-assigned cells'))+theme(axis.text.x=element_blank()))
    }
  })  
  names(plots) <- target_genes
  return(plots)
}

# LBF density plot of right vs. wrong assignments
lbf_plot <- function(rep2,cell_out) {
  labels <- rep2$target_gene[rep2$target_gene!='control']
  unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
  right <- sapply(1:length(labels),function(x) 
    ifelse(labels[x]%in%unroll_top[[x]],'Correct','Incorrect'))
  lbf <- cell_out$top_lbf
  return(ggplot(data=data.frame(lbf=lbf,right=right),aes(x=lbf,fill=right,y=..count..))+
    geom_density(alpha=0.5,position='identity')+xlab('log10 Bayes factor')+
    theme_classic(base_size=12)+scale_x_log10()+labs(fill='')+
    scale_fill_manual(values = c("Correct" = "#619CFF", "Incorrect" = "#F8766D")))
}

# Make guide comparison plot
guide_plot_comparison <- function(rep1,features,guide_fingerprints,guide1,guide2) {
  de_res <- lapply(c(guide1,guide2),function(x) {
    de <- FindMarkers(rep1,ident.1=x,ident.2='control',group.by='guide',
                      features=features,logfc.threshold=0,min.pct=0)
    de[hek_features,]
  })
  deg_status <- dplyr::case_when(de_res[[1]][,'p_val_adj']<0.05 &
                                 de_res[[2]][,'p_val_adj']<0.05 ~ 'DEG in both',
                                 de_res[[1]][,'p_val_adj']<0.05 ~ 'DEG in Guide 1 only',
                                 de_res[[2]][,'p_val_adj']<0.05 ~ 'DEG in Guide 2 only',
                                 TRUE ~ 'DEG in neither')
  g1<-ggplot(data.frame(Guide1=guide_fingerprints[[1]][,guide1],
                        Guide2=guide_fingerprints[[1]][,guide2],
                        DEG=deg_status),
             aes(x=Guide1,y=Guide2,color=DEG))+geom_point(alpha=0.5)+theme_classic(base_size=12)+
    geom_abline(slope=1,intercept=0,linetype='dashed')+xlab('Fingerprint for Guide 1')+
    ylab('Fingerprint for Guide 2')+theme(legend.position='none')+
    geom_text(data=data.frame(DEG=unique(deg_status),
                              cor=sapply(unique(deg_status),function(x) {
                                round(cor(guide_fingerprints[[1]][deg_status==x,guide1],
                                          guide_fingerprints[[1]][deg_status==x,guide2]),2)
                              })),aes(x=0,y=0.1,label=cor))+facet_wrap(~DEG)
  g2<-ggplot(data.frame(Guide1=de_res[[1]][,'avg_log2FC'],
                        Guide2=de_res[[2]][,'avg_log2FC'],
                        DEG=deg_status),
             aes(x=Guide1,y=Guide2,color=DEG))+geom_point(alpha=0.5)+theme_classic(base_size=12)+
    geom_abline(slope=1,intercept=0,linetype='dashed')+xlab('logFC for Guide 1')+
    ylab('logFC for Guide 2')+theme(legend.position='none')+
    geom_text(data=data.frame(DEG=unique(deg_status),
                              cor=sapply(unique(deg_status),function(x) {
                                round(cor(de_res[[1]][deg_status==x,'avg_log2FC'],
                                          de_res[[2]][deg_status==x,'avg_log2FC']),2)
                              })),aes(x=-2,y=2,label=cor))+facet_wrap(~DEG)
  return(ggpubr::ggarrange(g1,g2,nrow=1))
}

## Load in HEK data
set.seed(12424)
hek <- readRDS('/brahms/grabskii/fingerprinting_data/datasets/CPA_Perturb_seq/102623_seurat_obj_rna_singlets.Rds')
hek_setup <- data_setup(hek)
saveRDS(hek_setup,file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/hek_processed.Rds')
hek_rep1 <- hek_setup[[1]]
hek_rep2 <- hek_setup[[2]]

## Figures for schematics
set.seed(22125)
hek_sub <- hek_rep1[,c(sapply(c('control','CPSF1','CTR9','PAF1','NUDT21'),
                              function(x) sample(colnames(hek_rep1)[hek_rep1$target_gene==x],200)))]
hek_sub$target_gene <- factor(hek_sub$target_gene,levels=c('control','CPSF1','CTR9',
                                                           'PAF1','NUDT21'))
Idents(hek_sub) <- 'target_gene'
markers <- FindAllMarkers(hek_sub,only.pos=T)
markers <- markers %>% group_by(cluster) %>% dplyr::slice(1:10)

hek_sub2 <- hek_sub
scale_data <- GetAssayData(hek_sub2,slot='scale.data')
scale_data[markers$gene[11:20],hek_sub2$target_gene=='NUDT21'] <- 
  scale_data[markers$gene[11:20],hek_sub2$target_gene=='CPSF1']
hek_sub2[['SCT']]@scale.data <- scale_data

DoHeatmap(hek_sub,markers$gene[!markers$gene%in%hek_sub$target_gene],
          group.by='target_gene',label=F,raster=F)+
  theme(axis.text.y=element_blank())+NoLegend()
ggsave('/brahms/grabskii/fingerprinting_paper/Schematic_figures/dictionary_schematic.png',
       width=5.7,height=3.6,units='in',dpi=600)
DoHeatmap(hek_sub[,hek_sub$target_gene%in%c('CPSF1')],
          markers$gene[!markers$gene%in%hek_sub$target_gene],
          group.by='target_gene',label=F)+
  theme(axis.text.y=element_blank())+NoLegend()
ggsave('/brahms/grabskii/fingerprinting_paper/Schematic_figures/query_schematic1.png',
       width=1.14,height=3.6,units='in',dpi=600)
DoHeatmap(hek_sub[,hek_sub$target_gene%in%c('CTR9')],
          markers$gene[!markers$gene%in%hek_sub$target_gene],
          group.by='target_gene',label=F)+
  theme(axis.text.y=element_blank())+NoLegend()
ggsave('/brahms/grabskii/fingerprinting_paper/Schematic_figures/query_schematic2.png',
       width=1.14,height=3.6,units='in',dpi=600)
DoHeatmap(hek_sub2[,hek_sub2$target_gene%in%c('NUDT21')],
          markers$gene[!markers$gene%in%hek_sub$target_gene],
          group.by='target_gene',label=F)+
  theme(axis.text.y=element_blank())+NoLegend()
ggsave('/brahms/grabskii/fingerprinting_paper/Schematic_figures/query_schematic3.png',
       width=1.14,height=3.6,units='in',dpi=600)

betas <- rnorm(2000,0,0.25)
betas[500] <- 5
betas[c(1500,1501)] <- c(4.5,4.2)
ggplot(data.frame(Perturbations=1:2000,betas=betas),
       aes(x=Perturbations,y=betas))+geom_point()+
  geom_point(data=data.frame(Perturbations=500,betas=5),
             aes(x=Perturbations,y=betas),color='red')+
  geom_point(data=data.frame(Perturbations=c(1500,1501),
                             betas=c(4.5,4.2)),
             aes(x=Perturbations,y=betas),color='blue')+
  theme_classic(base_size=12)+
  theme(axis.ticks.x=element_blank(),
        axis.text.x=element_blank())+ylab('Betas')
ggsave('/brahms/grabskii/fingerprinting_paper/Schematic_figures/query_schematic4.pdf',
       width=6.1,height=2.9,units='in',dpi=600)

## Cross-replicate benchmark
# Learn Lambdas
set.seed(32125)
hek_perturbations <- unique(hek_rep1$target_gene[hek_rep1$target_gene!='control'])
hek_features <- choose_features(hek_rep1,'target_gene',hek_perturbations)
hek_features <- intersect(hek_features,rownames(GetAssayData(hek_rep2,slot='scale.data')))
hek_fingerprints <- fit(hek_rep1,'target_gene',hek_features)
saveRDS(hek_fingerprints,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_fingerprints.rds')

print(c("Number of fingerprints passing filter: ",ncol(hek_fingerprints[[1]])))

p <- ggplotify::as.ggplot(pheatmap(cor(hek_fingerprints[[1]]),treeheight_row=0,
                                   treeheight_col=0,silent=T))
print(p)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/fingerprints_heatmap.png',
       height=6.11,width=7.68,units='in',dpi=600)

# Classify sample-level
set.seed(32125)
hek_rep1_sub <- hek_rep1[,hek_rep1$target_gene%in%
                           c(colnames(hek_fingerprints[[1]]),'control')]
hek_rep2_sub <- hek_rep2[,hek_rep2$target_gene%in%
                           c(colnames(hek_fingerprints[[1]]),'control','NP')]
hek_sample <- classify(hek_rep2_sub,'target_gene',hek_fingerprints,sample_level=T)
saveRDS(hek_sample,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_sample_classification.rds')

sample_true_label <- names(hek_sample$top_credible_set)
sample_right <- sapply(1:length(hek_sample$top_credible_set),function(x) {
  assign <- hek_sample$top_credible_set[x]
  prts <- strsplit(assign,',')[[1]]
  if (all(prts=='unassigned')) {
    return('unassigned')
  }
  if (sample_true_label[x] %in% prts) {
    return('correct')
  }
  return('incorrect')
})
table(sample_right)
print(c('% of completely specific assignments: ',
        sum(hek_sample$top_credible_set==hek_sample$top_perturbation & 
              hek_sample$top_credible_set==hek_sample$full_assignment & 
              sample_right=='correct')/sum(sample_right=='correct')))

create_sample_heatmap(hek_sample,hek_fingerprints[[1]])+
  xlab('Query - HEK Replicate 2')+ylab('Dictionary - HEK Replicate 1')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_sample_heatmap.pdf',
       height=6.13,width=7.52,units='in')

# Classify cell-level
set.seed(32125)
hek_cell <- classify(hek_rep2_sub,'target_gene',hek_fingerprints,mc.cores=15)
saveRDS(hek_cell,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_cell_classification.rds')
hek_metrics <- compute_cell_metrics(hek_rep2_sub,hek_cell)

print(c('Number of total cells: ',length(hek_cell$top_credible_set)))
print(c('Number of unassigned cells: ',sum(hek_cell$top_perturbation=='unassigned')))
print(c('Number of assigned cells: ',sum(hek_cell$top_perturbation!='unassigned')))
print(c('% unassigned of held-out NTs: ',hek_metrics$np_rate))

maddie_excluded <- c('CPEB1','CPSF4L','CSTF2T','PAPD4','PAPD5','PAPOLG')
excluded <- unique(c(maddie_excluded,colnames(hek_fingerprints[[1]])[
  sapply(colnames(hek_fingerprints[[1]]),function(x) 
    all(hek_rep2_sub$mixscape_class.global[hek_rep2_sub$target_gene==x]=='NP'))
]))
non_excluded <- colnames(hek_rep2_sub)[!hek_rep2_sub$target_gene%in%c('control','NP',excluded)]
print(c('Number of non-excluded total cells: ',length(non_excluded)))
print(c('Number of non-excluded assigned cells: ',sum(hek_cell$top_perturbation[non_excluded]!='unassigned')))
print(hek_sample[[2]][excluded])

cell_true_label <- hek_rep2_sub$target_gene[names(hek_cell$top_credible_set)]
cell_right <- sapply(1:length(hek_cell$top_credible_set),function(x) {
  assign <- hek_cell$top_credible_set[x]
  prts <- strsplit(assign,',')[[1]]
  if (all(prts=='unassigned')) {
    return('unassigned')
  }
  if (cell_true_label[x] %in% prts) {
    return('correct')
  }
  return('incorrect')
})
table(cell_right[cell_right!='unassigned' & !cell_true_label%in%excluded])/
  sum(cell_right!='unassigned' & !cell_true_label%in%excluded)
print(c('% of completely specific assignments: ',
        sum(hek_cell$top_credible_set==hek_cell$top_perturbation & 
              hek_cell$top_credible_set==hek_cell$full_assignment & 
              cell_right=='correct' &!cell_true_label%in%excluded )/
          sum(cell_right=='correct' & !cell_true_label%in%excluded)))

print(c('% of completely specific assignments in PABPN1: ',
        sum(hek_cell$top_credible_set==hek_cell$top_perturbation & 
              hek_cell$top_credible_set==hek_cell$full_assignment & 
              cell_right=='correct' &
              cell_true_label=='PABPN1')/sum(cell_right=='correct'&
                                               cell_true_label=='PABPN1')))
print(c('% of completely specific assignments in CPSF1: ',
        sum(hek_cell$top_credible_set==hek_cell$top_perturbation & 
              hek_cell$top_credible_set==hek_cell$full_assignment & 
              cell_right=='correct' &
              cell_true_label=='CPSF1')/sum(cell_right=='correct'&
                                               cell_true_label=='CPSF1')))

hek_result_heatmaps <- create_cell_heatmap(hek_rep2_sub,hek_cell,hek_fingerprints[[1]],excluded=excluded)
p <- ggplotify::as.ggplot(hek_result_heatmaps[[1]])
print(p)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_full_assignments.png',
       width=15.5,height=5.7,units='in',dpi=600)
p <- ggplotify::as.ggplot(hek_result_heatmaps[[2]])
print(p)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_subset_assignments.png',
       width=11.5,height=5.7,units='in',dpi=600)

hek_expr_heatmaps <- create_expr_heatmap(hek_rep1_sub,hek_rep2_sub,hek_cell,hek_fingerprints[[1]])
hek_expr_heatmaps[[1]]
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_expr_heatmaps.png',
       width=12.8,height=7.8,units='in',dpi=600)
hek_expr_heatmaps[[2]][['CDC73']]
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_cdc73.png',
       width=7.5,height=6.2,units='in',dpi=600)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_cdc73.pdf',
       width=7.5,height=6.2,units='in')
print(c('% CDC73 cells unassigned: ',
        sum(cell_true_label=='CDC73' & hek_cell$top_perturbation=='unassigned')/
          sum(cell_true_label=='CDC73')))
print(c('% CDC73 cells NP out of unassigned: ',
        sum(hek_rep2_sub$mixscape_class.global[names(hek_cell$top_perturbation)]=='NP' & 
              cell_true_label=='CDC73' & hek_cell$top_perturbation=='unassigned')/
          sum(cell_true_label=='CDC73' & hek_cell$top_perturbation=='unassigned')))

nudt21_degs <- FindMarkers(hek_rep1,ident.1='NUDT21',ident.2='control',
                           group.by='target_gene')
cpsf6_degs <- FindMarkers(hek_rep1,ident.1='CPSF6',ident.2='control',
                           group.by='target_gene')
print(c('Number of shared DEGs: ',
        length(intersect(rownames(nudt21_degs)[nudt21_degs$p_val_adj < 0.05],
                         rownames(cpsf6_degs)[cpsf6_degs$p_val_adj < 0.05]))))
credible_set_heatmap(hek_rep1_sub,hek_rep2_sub,hek_cell,'NUDT21','CPSF6')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_credible_set.png',
       width=9.27,height=6.43,units='in',dpi=600)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_credible_set.pdf',
       width=9.27,height=6.43,units='in')

target_genes <- target_gene_plot(hek_rep2_sub,hek_cell)
ggpubr::ggarrange(target_genes[['CDC73']],target_genes[['CTR9']],nrow=2,ncol=1)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek_target_genes.pdf',
       width=4.5,height=7.2,units='in')

lbf_plot(hek_rep2_sub,hek_cell)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/lbf_density.pdf',
       width=5.1,height=3.7,units='in')

# Single-cell vs. bulk comparison
set.seed(32125)
hek_rep1$guide[hek_rep1$target_gene=='control'] <- 'control'
guide_fingerprints <- fit(hek_rep1,'guide',hek_features)
saveRDS(guide_fingerprints,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_guide_fingerprints.rds')

guide_plot_comparison(hek_rep1,hek_features,guide_fingerprints,'CDC73-I2','CDC73-I3')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/cdc73_lambda_comparison.pdf',
       width=8.5,height=4.8,units='in')
guide_plot_comparison(hek_rep1,hek_features,guide_fingerprints,'CPSF1-I3','CPSF1-I5')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/cpsf1_lambda_comparison.pdf',
       width=8.5,height=4.8,units='in')

print(c('Correlation for CPSF1: ',cor(guide_fingerprints[[1]][,'CPSF1-I3'],
                                      guide_fingerprints[[1]][,'CPSF1-I5'])))

## Cross-context benchmark
# Load in data
set.seed(12424)
k562 <- readRDS('/brahms/grabskii/fingerprinting_data/datasets/CPA_Perturb_seq/102523_seurat_obj_rna_singlets.Rds')
k562_setup <- data_setup(k562)
saveRDS(k562_setup,file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/k562_processed.Rds')
k562_rep1 <- k562_setup[[1]]
k562_rep2 <- k562_setup[[2]]

# Learn Lambdas
set.seed(32125)
k562_perturbations <- unique(k562_rep1$target_gene[k562_rep1$target_gene!='control'])
k562_features <- choose_features(k562_rep1,'target_gene',k562_perturbations)
k562_features <- intersect(k562_features,rownames(GetAssayData(hek_rep2,slot='scale.data')))
k562_fingerprints <- fit(k562_rep1,'target_gene',k562_features)
saveRDS(k562_fingerprints,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/K562_fingerprints_for_HEK.rds')

print(c("Number of fingerprints passing filter: ",ncol(k562_fingerprints[[1]])))

# Classify sample-level
set.seed(32125)
k562_rep1_sub <- k562_rep1[,k562_rep1$target_gene%in%
                             c(colnames(k562_fingerprints[[1]]),'control')]
hek_rep2_sub2 <- hek_rep2[,hek_rep2$target_gene%in%
                           c(colnames(k562_fingerprints[[1]]),'control','NP')]
hek_sample2 <- classify(hek_rep2_sub2,'target_gene',k562_fingerprints,sample_level=T)
saveRDS(hek_sample2,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_sample_classification_from_K562.rds')

sample_true_label2 <- names(hek_sample2$top_credible_set)
sample_right2 <- sapply(1:length(hek_sample2$top_credible_set),function(x) {
  assign <- hek_sample2$top_credible_set[x]
  prts <- strsplit(assign,',')[[1]]
  if (all(prts=='unassigned')) {
    return('unassigned')
  }
  if (sample_true_label2[x] %in% prts) {
    return('correct')
  }
  return('incorrect')
})
table(sample_right2)
print(c('% of completely specific assignments: ',
        sum(hek_sample2$top_credible_set==hek_sample2$top_perturbation & 
              hek_sample2$top_credible_set==hek_sample2$full_assignment & 
              sample_right2=='correct')/sum(sample_right2=='correct')))

create_sample_heatmap(hek_sample2,k562_fingerprints[[1]])+
  xlab('Query - HEK Replicate 2')+ylab('Dictionary - K562 Replicate 1')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek2_sample_heatmap.pdf',
       height=6.13,width=7.52,units='in')

# Classify cell-level
set.seed(32125)
hek_cell2 <- classify(hek_rep2_sub2,'target_gene',k562_fingerprints,mc.cores=15)
saveRDS(hek_cell2,
        file='/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_cell_classification_from_K562.rds')
hek_metrics2 <- compute_cell_metrics(hek_rep2_sub2,hek_cell2)

print(c('Number of total cells: ',length(hek_cell2$top_credible_set)))

cell_true_label2 <- hek_rep2_sub2$target_gene[names(hek_cell2$top_credible_set)]
cell_right2 <- sapply(1:length(hek_cell2$top_credible_set),function(x) {
  assign <- hek_cell2$top_credible_set[x]
  prts <- strsplit(assign,',')[[1]]
  if (all(prts=='unassigned')) {
    return('unassigned')
  }
  if (cell_true_label2[x] %in% prts) {
    return('correct')
  }
  return('incorrect')
})
table(cell_right2[!cell_true_label2 %in% excluded])/
  length(cell_right2[!cell_true_label2 %in% excluded])
table(cell_right2[cell_right2!='unassigned' & !cell_true_label2 %in% excluded])/
  sum(cell_right2!='unassigned' & !cell_true_label2 %in% excluded)
print(c('% of completely specific assignments: ',
        sum(hek_cell2$top_credible_set==hek_cell2$top_perturbation & 
              hek_cell2$top_credible_set==hek_cell2$full_assignment & 
              cell_right2=='correct' & !cell_true_label2 %in% excluded)/
          sum(cell_right2=='correct' & !cell_true_label2 %in% excluded)))

hek_result_heatmaps2 <- create_cell_heatmap(hek_rep2_sub2,hek_cell2,k562_fingerprints[[1]],
                                            order=hek_result_heatmaps[[3]])
p <- ggplotify::as.ggplot(hek_result_heatmaps2[[1]])
print(p)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek2_full_assignments.png',
       width=15.5,height=5.7,units='in',dpi=600)
p <- ggplotify::as.ggplot(hek_result_heatmaps2[[2]])
print(p)
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/hek2_subset_assignments.png',
       width=11.5,height=5.7,units='in',dpi=600)

# PAF complex summary
names(cell_right2) <- names(cell_true_label2)
paf_assigned <- names(hek_cell2$top_perturbation)[cell_true_label2 %in% c('LEO1','CDC73','CTR9','PAF1') &
                                                    cell_right2!='unassigned']
print(c('% of assignments correct and completely specific:', 
        sum(cell_right2[paf_assigned]=='correct' & 
              hek_cell2$top_perturbation[paf_assigned]==hek_cell2$full_assignment[paf_assigned])/
          length(paf_assigned)))
paf_count <- sapply(paf_assigned,function(x) {
  assign <- strsplit(hek_cell2$top_credible_set[x],',')[[1]]
  sum(assign %in% c('LEO1','CDC73','CTR9','PAF1'))
})
print(c('% assignments containing PAF members but not correct and completely specific:', 
        sum(paf_count >= 2 | (paf_count==1 & cell_right2[paf_assigned]!='correct'))/
          length(paf_assigned)))

# Example of divergent transcriptional responses
set.seed(8525)
hek_degs <- FindMarkers(hek_rep1_sub,ident.1='FIP1L1',ident.2='control',group.by='target_gene')
k562_degs <- FindMarkers(k562_rep1_sub,ident.1='FIP1L1',ident.2='control',group.by='target_gene')
shared <- rownames(k562_degs)[which(k562_degs$avg_log2FC<0 & 
                                      hek_degs[rownames(k562_degs),'avg_log2FC']<0 &
                                      k562_degs$p_val_adj < 0.05 &
                                      hek_degs[rownames(k562_degs),'p_val_adj']<0.05)][1:10]
k562_spec <- rownames(k562_degs)[which(k562_degs$avg_log2FC<0 & 
                                         k562_degs$p_val_adj < 0.05 &
                                         hek_degs[rownames(k562_degs),'p_val']>0.05)][1:10]
hek_spec <- rownames(hek_degs)[which(hek_degs$avg_log2FC<0 & 
                                       hek_degs$p_val_adj < 0.05 &
                                       k562_degs[rownames(hek_degs),'p_val']>0.05)][1:10]
genes_to_plot <- c(shared,k562_spec,hek_spec)
(DoHeatmap(hek_rep1_sub,genes_to_plot,group.by='target_gene',raster=F,
          cells=c(colnames(hek_rep1_sub)[hek_rep1_sub$target_gene=='FIP1L1'],
                  sample(colnames(hek_rep1_sub)[hek_rep1_sub$target_gene=='control'],100)))+
    theme(legend.position='bottom',
          legend.direction='horizontal')+guides(color='none'))+
  (DoHeatmap(k562_rep1_sub,genes_to_plot,group.by='target_gene',raster=F,
             cells=c(colnames(k562_rep1_sub)[k562_rep1_sub$target_gene=='FIP1L1'],
                     sample(colnames(k562_rep1_sub)[k562_rep1_sub$target_gene=='control'],100)))+
     theme(legend.position='bottom',
           legend.direction='horizontal')+guides(color='none'))
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/fip1l1_heatmap.pdf',
       width=7.3,height=5.6,units='in')
ggsave('/brahms/grabskii/fingerprinting_paper/CPA_Perturb_seq_figures/fip1l1_heatmap.png',
       width=7.3,height=5.6,units='in',dpi=600)