for (x in 1:8) {
gwps <- readRDS(paste0('/brahms/grabskii/fingerprinting_data/datasets/GWPS/gwps_subset',x,'.rds'))
gwps$gene <- as.character(gwps$gene)
gwps$gene[gwps$gene=='non-targeting'] <- 'control'
print(length(unique(gwps$gene[gwps$gene!='control'])))
}
1234*2+1233*6
gc()
library(dplyr)
library(ggplot2)
library(pheatmap)
source('Clean_methods.R')
# Sets up CPA-Perturb-seq data for benchmark by:
## (0) filtering cells
## (1) running Mixscape on the data
## (2) running SCTransform on both sets
## (3) randomly renaming some NT cells from the test set (replicate 2)
## (4) renaming 'NT' cells as 'control' cells
data_setup <- function(data) {
data <- JoinLayers(data)
data[['percent.mt']] <- PercentageFeatureSet(data,pattern='^MT-')
data <- data[,data$percent.mt<15&data$nCount_GUIDE>100]
data <- NormalizeData(data)
data <- FindVariableFeatures(data)
data <- ScaleData(data)
data <- RunPCA(data)
data <- CalcPerturbSig(data,assay='RNA',slot='data',gd.class='target_gene',
nt.cell.class='NT',reduction='pca',ndims=40,
num.neighbors=20,split.by='replicate',
new.assay.name='PRTB')
DefaultAssay(data) <- 'PRTB'
VariableFeatures(data) <- VariableFeatures(data[["RNA"]])
data <- ScaleData(data, do.scale = F, do.center = T)
data <- RunMixscape(data,assay='PRTB',slot='scale.data',labels='target_gene',
nt.class.name='NT',min.de.genes=5,iter.num=10,de.assay='RNA',
verbose=F,prtb.type='KO')
DefaultAssay(data) <- 'RNA'
rep1 <- data[,data$replicate=='R1']
rep1 <- SCTransform(rep1,return.only.var.genes=F)
rep1$target_gene[rep1$target_gene=='NT'] <- 'control'
rep2 <- data[,data$replicate=='R2']
rep2 <- SCTransform(rep2,return.only.var.genes=F)
rep2$target_gene[sample(which(rep2$target_gene=='NT'),
0.2*sum(rep2$target_gene=='NT'))] <- 'NP'
rep2$target_gene[rep2$target_gene=='NT'] <- 'control'
return(list(rep1,rep2))
}
# Create heatmap of results for sample-level classification
create_sample_heatmap <- function(sample_out,Lambdas) {
top_cs <- sapply(1:length(sample_out$top_credible_set),function(x) {
init <- rep(0,ncol(Lambdas)+1)
names(init) <- c(colnames(Lambdas),'unassigned')
prt <- strsplit(sample_out$top_credible_set[x],',')[[1]]
init[prt[1]] <- 1
if (length(prt)>1) {
init[prt[2:length(prt)]] <- 0.5
}
init
})
colnames(top_cs) <- names(sample_out$top_credible_set)
top_cs.m <- reshape2::melt(top_cs)
represented_prts <- intersect(colnames(Lambdas),names(sample_out$top_credible_set))
hc <- heatmap(top_cs[,represented_prts])
ord <- represented_prts[hc$colInd]
if (sum(!colnames(Lambdas)%in%names(sample_out$top_credible_set))>0) {
ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%names(sample_out$top_credible_set)])
}
print(ggplot(top_cs.m,aes(x=factor(Var2,levels=c(ord,'NP')),
y=factor(Var1,levels=c(ord,'unassigned')),
fill=factor(value)))+
geom_tile()+theme_classic(base_size=12)+
xlab('Query')+ylab('Perturbation')+
scale_fill_discrete(breaks=c(0,0.5,1),
type=c('white','#A08CC2','blue'))+
theme(legend.position='none',axis.text.x=element_text(angle=90)))
}
# Compute metrics for single-cell classification
compute_cell_metrics <- function(rep2,cell_out) {
labels <- rep2$target_gene[rep2$target_gene!='control']
first <- cell_out$top_perturbation
unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,',')[[1]])
top_len <- sapply(unroll_top,function(x) {
if (all(x=='unassigned')) {
0
} else {
length(x)
}
})
num_cs <- sapply(1:length(cell_out$full_assignment),function(x) {
if (cell_out$full_assignment[x]=='unassigned') {
0
} else {
stringr::str_count(cell_out$full_assignment[x],';')+1
}
})
right <- sapply(1:length(labels),function(x) labels[x]%in%unroll_top[[x]])
prts <- unique(labels[labels!='NP'])
sens <- sapply(prts,function(x) {
sub <- first[labels==x]
sum(sub==x)
})/sapply(prts,function(x) sum(labels==x))
prec <- sapply(prts,function(x) {
sum(labels==x & first==x)/sum(first==x)
})
np_rate <- sum(labels=='NP' & first=='unassigned')/sum(labels=='NP')
cs_sens <- sapply(prts,function(x) {
sum(sapply(unroll_top[labels==x],function(i) x %in% i))
})/sapply(prts,function(x) sum(labels==x))
cs_len <- sapply(prts,function(x) {
median(top_len[labels==x & top_len!=0])
})
num_cs_per_perturb <- sapply(prts,function(x) {
sum(num_cs[labels==x & num_cs!=0]==1)/sum(labels==x & num_cs!=0)
})
return(list(sens=sens,prec=prec,np_rate=np_rate,cs_sens=cs_sens,
cs_len=cs_len,num_cs_per_perturb=num_cs_per_perturb))
}
# Create heatmap of results for cell-level classification
create_cell_heatmap <- function(rep2,cell_out,Lambdas,order=NULL,excluded=NULL) {
labels <- rep2$target_gene[rep2$target_gene!='control']
unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
our_res <- sapply(unroll_top,function(x) {
ind <- rep(0,ncol(Lambdas)+1)
names(ind) <- c(colnames(Lambdas),'unassigned')
ind[x[1]] <- 1
if (length(x)>1) {
ind[x[2:length(x)]] <- 0.5
}
ind
})
colnames(our_res) <- names(labels)
represented_prts <- intersect(colnames(Lambdas),unique(labels))
hc <- hclust(dist(t(Lambdas[,represented_prts])))
ord <- represented_prts[hc$order]
if (sum(!colnames(Lambdas)%in%labels)>0) {
ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%labels])
}
cell_order <- unlist(sapply(c(ord,'NP'),function(perturb) {
cell_names <- colnames(our_res)[labels==perturb]
cell_names[order(rep2$mixscape_class_p_ko[cell_names],decreasing=T)]
}))
p1 <- pheatmap(our_res[order(factor(rownames(our_res),
levels=c(ord,'unassigned'))),
cell_order],
treeheight_col=0,treeheight_row=0,
cluster_rows=F,doTranspose=T,show_colnames=F,cluster_cols=F,
color=colorRampPalette(c('#F4F4F4','#A08CC2','#3944BC'))(3),
annotation_col=data.frame(label=labels[cell_order],
mixscape=rep2$mixscape_class_p_ko[cell_order],
row.names=cell_order),
silent=T)
if (is.null(order)) {
subset_prts <- setdiff(colnames(Lambdas),excluded)
hc <- hclust(dist(t(Lambdas[,subset_prts])))
ord <- subset_prts[hc$order]
if (sum(!colnames(Lambdas)%in%subset_prts)>0) {
ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%subset_prts])
}
} else {
ord <- order[[1]]
subset_prts <- order[[2]]
}
cell_order <- unlist(sapply(c(ord,'NP'),function(perturb) {
cell_names <- colnames(our_res)[labels==perturb]
cell_names[order(rep2$mixscape_class_p_ko[cell_names],decreasing=T)]
}))
cells_to_keep <- cell_order[which(labels[cell_order]%in%subset_prts)]
p2 <- pheatmap(our_res[order(factor(rownames(our_res),
levels=c(ord,'unassigned'))),
cells_to_keep],
treeheight_col=0,treeheight_row=0,
cluster_rows=F,doTranspose=T,show_colnames=F,cluster_cols=F,
color=colorRampPalette(c('#F4F4F4','#3944BC'))(3),
annotation_col=data.frame(label=labels[cells_to_keep],
mixscape=rep2$mixscape_class_p_ko[cells_to_keep],
row.names=cells_to_keep),
silent=T)
return(list(p1,p2,list(ord,subset_prts)))
}
# Create expression heatmaps
create_expr_heatmap <- function(rep1,rep2,cell_out,Lambdas) {
labels <- rep2$target_gene[rep2$target_gene!='control']
represented_prts <- intersect(colnames(Lambdas),unique(labels))
hc <- heatmap(abs(cor(Lambdas[,represented_prts])))
ord <- represented_prts[hc$rowInd]
if (sum(!colnames(Lambdas)%in%labels)>0) {
ord <- c(ord,colnames(Lambdas)[!colnames(Lambdas)%in%labels])
}
rep1$target_gene <- factor(rep1$target_gene,levels=c(ord,'control'))
Idents(rep1) <- rep1$target_gene
markers <- FindAllMarkers(rep1)
markers <- markers %>% group_by(cluster) %>%
filter(avg_log2FC>0 & cluster!='control') %>%
dplyr::slice(1:10)
markers <- unique(markers$gene)
markers <- intersect(markers,rownames(GetAssayData(rep1,slot='scale.data')))
markers <- intersect(markers,rownames(GetAssayData(rep2,slot='scale.data')))
rep2$assign <- 'unassigned'
rep2$assign[names(cell_out$top_perturbation)] <- cell_out$top_perturbation
tab <- table(rep2$assign)
lbf <- cell_out$top_lbf
rep2_plot <- rep2[,rep2$assign!='unassigned'&rep2$assign%in%names(tab[tab>=100])]
rep2_plot$assign <- factor(rep2_plot$assign,levels=intersect(ord,unique(rep2_plot$assign)))
g1 <- DoHeatmap(rep2_plot,markers,group.by='assign',size=3,raster=FALSE,
cells=colnames(rep2_plot)[order(lbf[colnames(rep2_plot)],decreasing=T)])+
theme(axis.text.y=element_blank(),legend.position='bottom',
legend.direction='horizontal')+guides(color='none')
unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
right <- sapply(1:length(labels),function(x)
if (labels[x]%in%unroll_top[[x]]) {
'correct'
} else {
'incorrect'
})
right[cell_out$top_perturbation=='unassigned'] <- 'unassigned'
rep2$status <- 'control'
rep2$status[rep2$target_gene!='control'] <- right
rep2$status <- factor(rep2$status,levels=c('correct','incorrect','unassigned','control'))
rep1$target_gene <- as.character(rep1$target_gene)
g_perturbs <- lapply(unique(as.character(rep2_plot$assign)),function(p) {
p_markers <- FindMarkers(rep1,ident.1=p,ident.2='control',group.by='target_gene')
p_markers <- rownames(p_markers)[1:25][order(p_markers$avg_log2FC[1:25])]
p_markers <- intersect(p_markers,rownames(GetAssayData(rep1,slot='scale.data')))
p_markers <- intersect(p_markers,rownames(GetAssayData(rep2,slot='scale.data')))
DoHeatmap(rep2,p_markers,group.by='status',raster=F,
cells=colnames(rep2)[rep2$target_gene%in%c('control',p)],label=F)+
theme(legend.position='bottom',legend.direction='horizontal')+guides(color='none')
})
names(g_perturbs) <- unique(as.character(rep2_plot$assign))
return(list(g1,g_perturbs))
}
# Plot example of credible sets
credible_set_heatmap <- function(rep1,rep2,cell_out,p1,p2) {
m1 <- FindMarkers(rep1,ident.1=c(p1,p2),ident.2='control',group.by='target_gene')
m1 <- m1[m1$avg_log2FC>0,]
m1 <- rownames(m1)[1:20]
p1_only <- FindMarkers(rep1,ident.1=p1,ident.2='control',group.by='target_gene')
p1_only <- p1_only[p1_only$avg_log2FC>0 & p1_only$p_val_adj<0.05,]
p2_only <- FindMarkers(rep1,ident.1=p2,ident.2='control',group.by='target_gene')
p2_only <- p2_only[p2_only$avg_log2FC>0 & p2_only$p_val_adj<0.05,]
m2 <- FindMarkers(rep1,ident.1=p1,ident.2=p2,group.by='target_gene')
m2_1 <- m2[rownames(m2)%in%rownames(p1_only)&m2$avg_log2FC>0,]
m2_1 <- rownames(m2_1)[1:10][order(m2_1$avg_log2FC[1:10])]
m2_2 <- m2[rownames(m2)%in%rownames(p2_only)&m2$avg_log2FC<0,]
m2_2 <- rownames(m2_2)[1:10][order(m2_2$avg_log2FC[1:10])]
genes_to_plot <- unique(c(p1,p2,m1,m2_1,m2_2))
cells_to_include <- c(colnames(rep2)[rep2$target_gene%in%c(p1,p2)],
sample(colnames(rep2)[rep2$target_gene=='control'],50))
rep2_sub <- rep2[,cells_to_include]
rep2_sub$assign <- dplyr::case_when(is.na(cell_out$top_perturbation[colnames(rep2_sub)]) ~ 'control',
cell_out$top_perturbation[colnames(rep2_sub)]=='unassigned'~'unassigned',
cell_out$top_credible_set[colnames(rep2_sub)]==p1~p1,
cell_out$top_credible_set[colnames(rep2_sub)]==p2~p2,
cell_out$top_credible_set[colnames(rep2_sub)]%in%c(paste0(p1,',',p2),paste0(p2,',',p1),
paste0(p1,'_',p2),paste0(p2,'_',p1))~'both',
TRUE~'other')
rep2_sub <- rep2_sub[,rep2_sub$assign!='other']
rep2_sub$assign <- factor(rep2_sub$assign,levels=c(p1,'both',p2,'unassigned','control'))
g1 <- DoHeatmap(rep2_sub,genes_to_plot,group.by='assign',size=3,raster=F)+
theme(legend.position='top',legend.direction='horizontal')+guides(color='none')
true <- rep2_sub$target_gene
cells <- c(colnames(rep2_sub)[rep2_sub$assign==p1],
colnames(rep2_sub)[rep2_sub$assign=='both'],
colnames(rep2_sub)[rep2_sub$assign==p2],
colnames(rep2_sub)[rep2_sub$assign=='unassigned'],
colnames(rep2_sub)[rep2_sub$assign=='control'])
g2 <- ggplot(data=data.frame(cells=cells,true=true[cells]),
aes(x=factor(cells,levels=cells),y=1,fill=true))+
geom_tile()+theme_classic(base_size=12)+
scale_fill_manual(values=c('white','#619CFF','#F8766D'))+
theme(axis.line=element_blank(),axis.ticks=element_blank(),
axis.text=element_blank(),axis.title.x=element_blank(),
legend.position='none',
axis.title.y=element_text(size=8,angle=0,vjust=0.5))+ylab('True')
return(cowplot::plot_grid(g1,g2,
ncol=1,align='v',rel_heights=c(15,1),axis='lr'))
}
# Compare target gene to assignment
target_gene_plot <- function(rep2,cell_out) {
target_genes <- unique(rep2$target_gene[!rep2$target_gene%in%c('control','NP')])
plots <- lapply(target_genes,function(p) {
pick <- which(cell_out$top_credible_set==p)
lbf_pick <- cell_out$top_lbf[pick]
if (p %in% rownames(GetAssayData(rep2,slot='scale.data')) & length(lbf_pick)>100) {
target <- GetAssayData(rep2,slot='scale.data')[p,names(cell_out[[1]])[pick]]
quantiles <- cut(lbf_pick,quantile(lbf_pick,seq(0,1,by=.1)))
quantiles[is.na(quantiles)] <- levels(quantiles)[1]
return(ggplot(data=data.frame(lbf_bin=quantiles,target_expr=target),aes(x=lbf_bin,y=target_expr))+
geom_boxplot()+theme_classic(base_size=12)+
xlab('log10 Bayes factor decile')+ylab('Target gene expression')+
ggtitle(paste0(p,'-assigned cells'))+theme(axis.text.x=element_blank()))
}
})
names(plots) <- target_genes
return(plots)
}
# LBF density plot of right vs. wrong assignments
lbf_plot <- function(rep2,cell_out) {
labels <- rep2$target_gene[rep2$target_gene!='control']
unroll_top <- lapply(cell_out$top_credible_set,function(x) strsplit(x,'[,_]')[[1]])
right <- sapply(1:length(labels),function(x)
ifelse(labels[x]%in%unroll_top[[x]],'Correct','Incorrect'))
lbf <- cell_out$top_lbf
return(ggplot(data=data.frame(lbf=lbf,right=right),aes(x=lbf,fill=right,y=..count..))+
geom_density(alpha=0.5,position='identity')+xlab('log10 Bayes factor')+
theme_classic(base_size=12)+scale_x_log10()+labs(fill='')+
scale_fill_manual(values = c("Correct" = "#619CFF", "Incorrect" = "#F8766D")))
}
# Make guide comparison plot
guide_plot_comparison <- function(rep1,features,guide_fingerprints,guide1,guide2) {
de_res <- lapply(c(guide1,guide2),function(x) {
de <- FindMarkers(rep1,ident.1=x,ident.2='control',group.by='guide',
features=features,logfc.threshold=0,min.pct=0)
de[hek_features,]
})
deg_status <- dplyr::case_when(de_res[[1]][,'p_val_adj']<0.05 &
de_res[[2]][,'p_val_adj']<0.05 ~ 'DEG in both',
de_res[[1]][,'p_val_adj']<0.05 ~ 'DEG in Guide 1 only',
de_res[[2]][,'p_val_adj']<0.05 ~ 'DEG in Guide 2 only',
TRUE ~ 'DEG in neither')
g1<-ggplot(data.frame(Guide1=guide_fingerprints[[1]][,guide1],
Guide2=guide_fingerprints[[1]][,guide2],
DEG=deg_status),
aes(x=Guide1,y=Guide2,color=DEG))+geom_point(alpha=0.5)+theme_classic(base_size=12)+
geom_abline(slope=1,intercept=0,linetype='dashed')+xlab('Fingerprint for Guide 1')+
ylab('Fingerprint for Guide 2')+theme(legend.position='none')+
geom_text(data=data.frame(DEG=unique(deg_status),
cor=sapply(unique(deg_status),function(x) {
round(cor(guide_fingerprints[[1]][deg_status==x,guide1],
guide_fingerprints[[1]][deg_status==x,guide2]),2)
})),aes(x=0,y=0.1,label=cor))+facet_wrap(~DEG)
g2<-ggplot(data.frame(Guide1=de_res[[1]][,'avg_log2FC'],
Guide2=de_res[[2]][,'avg_log2FC'],
DEG=deg_status),
aes(x=Guide1,y=Guide2,color=DEG))+geom_point(alpha=0.5)+theme_classic(base_size=12)+
geom_abline(slope=1,intercept=0,linetype='dashed')+xlab('logFC for Guide 1')+
ylab('logFC for Guide 2')+theme(legend.position='none')+
geom_text(data=data.frame(DEG=unique(deg_status),
cor=sapply(unique(deg_status),function(x) {
round(cor(de_res[[1]][deg_status==x,'avg_log2FC'],
de_res[[2]][deg_status==x,'avg_log2FC']),2)
})),aes(x=-2,y=2,label=cor))+facet_wrap(~DEG)
return(ggpubr::ggarrange(g1,g2,nrow=1))
}
hek_setup <- readRDS('/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/hek_processed.Rds')
hek_rep1 <- hek_setup[[1]]
hek_rep2 <- hek_setup[[2]]
hek_perturbations <- unique(hek_rep1$target_gene[hek_rep1$target_gene!='control'])
hek_fingerprints <- readRDS('/brahms/grabskii/fingerprinting_data/intermediate_outputs/CPA_Perturb_seq/HEK_fingerprints.rds')
hek_features <- rownames(hek_fingerprints[[1]])
hek_rep1$guide[hek_rep1$target_gene=='control'] <- 'control'
rep1 <- hek_rep1
features <- hek_features
guide1 <- 'CPSF1-I3'
guide2 <- 'CPSF1-I5'
de_res <- lapply(c(guide1,guide2),function(x) {
de <- FindMarkers(rep1,ident.1=x,ident.2='control',group.by='guide',
features=features,logfc.threshold=0,min.pct=0)
de[hek_features,]
})
cor(de_res[[1]],de_res[[2]])
cor(de_res[[1]]$avg_log2FC,de_res[[2]]$avg_log2FC)
setwd('../../fingerprinting.internal')
?devtools::build
devtools::clean_dll()
devtools::document()
devtools::build(vignettes=FALSE)
library(fingerprinting.internal)
library(Seurat)
library(pheatmap)
library(stringr)
options(future.globals.maxSize = 10 * 1024^3)
counts <- ReadMtx(mtx = "/brahms/grabskii/jost_data/GSE132080_10X_matrix.mtx.gz",
cells = "/brahms/grabskii/jost_data/GSE132080_10X_barcodes.tsv.gz",
features = "/brahms/grabskii/jost_data/GSE132080_10X_genes.tsv.gz")
meta_data <- read.csv("/brahms/grabskii/jost_data/GSE132080_cell_identities.csv.gz")
rownames(meta_data) <- meta_data$cell_barcode
jost <- CreateSeuratObject(counts = counts, meta.data = meta_data)
jost <- subset(jost, subset = number_of_cells == 1)
jost <- subset(jost, subset = guide_identity != '*')
jost <- jost[,!is.na(jost$guide_identity)]
jost$gene <- str_extract(jost$guide_identity, "^[^_]+")
jost$gRNA_id <- sapply(jost$guide_identity, function(x) str_sub(x, -2))
jost_match <- jost[,jost$gRNA_id == '00' |
(jost$gene == 'neg' &
jost$gRNA_id %in% c('01','02','06','17','27'))]
jost_mismatch <- jost[,(jost$gRNA_id != '00' & jost$gene != 'neg') |
(jost$gene == 'neg' &
jost$gRNA_id %in% c('28','40','54','83','89'))]
jost_match <- SCTransform(jost_match, return.only.var.genes = FALSE)
jost_mismatch <- SCTransform(jost_mismatch, return.only.var.genes = FALSE)
features <- ChooseFeatures(jost_match, method = 'de',
perturbation_meta = 'gene', control_class = 'neg')
features <- intersect(features,
rownames(GetAssayData(jost_mismatch, assay = 'SCT',
layer = 'scale.data')))
dictionary <- LearnDictionary(jost_match, perturbation_meta = 'gene',
control_class = 'neg', features = features)
pheatmap(cor(dictionary$fingerprints$Lambdas), treeheight_row = 0, treeheight_col = 0)
jost_mismatch <- FingerprintCells(jost_mismatch, condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = TRUE)
group_level_summary <- SummarizeResults(jost_mismatch, group_level = TRUE,
condition_meta = 'gene', control_class = 'neg')
print(group_level_summary)
tidy_summary <- SummarizeResults(jost_mismatch, group_level = TRUE,
condition_meta = 'gene', control_class = 'neg',
tidy = TRUE)
print(tidy_summary[1:25,])
LongIslandCityPlot(jost_mismatch, query = 'CAD', condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = T, cs = 10)
LongIslandCityPlot(jost_mismatch, query = 'EIF2S1', condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = T, cs = 10)
ExplainMatch(jost_mismatch, query = 'CAD', match = 'CAD', condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = T, num_genes = 25, plot = FALSE)
ExplainMatch(jost_mismatch, query = 'CAD', match = 'CAD', condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = T, ref = jost_match, perturbation_meta = 'gene',
control_class_ref = 'neg', num_genes = 25)
ExplainMatch(jost_mismatch, query = 'CAD', match = 'CAD', condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = T, ref = jost_match, perturbation_meta = 'gene',
control_class_ref = 'neg', num_genes = 25, include_de = 10)
jost_mismatch$guide_identity2 <- jost_mismatch$guide_identity
jost_mismatch$guide_identity2[jost_mismatch$gene == 'neg'] <- 'neg'
jost_mismatch <- FingerprintCells(jost_mismatch, condition_meta = 'guide_identity2',
control_class = 'neg', dictionary = dictionary,
group_level = TRUE)
group_level_summary <- SummarizeResults(jost_mismatch, group_level = TRUE,
condition_meta = 'guide_identity2',
control_class = 'neg')
print(group_level_summary)
ExplainMatch(jost_mismatch, query = 'MTOR_MTOR_+_11322547.23-P1P2_10',
match = 'GINS1', condition_meta = 'guide_identity2',
control_class = 'neg', dictionary = dictionary,
group_level = T, ref = jost_match, perturbation_meta = 'gene',
control_class_ref = 'neg', num_genes = 25, include_de = 10)
gata1_degs <- FindMarkers(jost_match, ident.1 = 'GATA1', ident.2 = 'neg',
group.by = 'gene')
gata1_degs <- rownames(gata1_degs)[1:25][order(gata1_degs$avg_log2FC[1:25])]
DoHeatmap(jost_mismatch, gata1_degs, group.by = 'guide_identity2', label = F,
cells = colnames(jost_mismatch)[jost_mismatch$gene %in% c('neg','GATA1')])
jost_mismatch <- FingerprintCells(jost_mismatch, condition_meta = 'gene',
control_class = 'neg', dictionary = dictionary,
group_level = FALSE, mc.cores = 5)
cell_level_summary <- SummarizeResults(jost_mismatch, group_level = FALSE,
condition_meta = 'gene', control_class = 'neg')
print(head(cell_level_summary))
hspa5_markers <- FindMarkers(jost_match, ident.1 = 'HSPA5', ident.2 = 'neg',
group.by = 'gene')
hspa5_markers <- rownames(hspa5_markers)[1:50][order(hspa5_markers$avg_log2FC[1:50])]
DoHeatmap(jost_mismatch, hspa5_markers,
cells = colnames(jost_mismatch)[jost_mismatch$gene == 'HSPA5'],
group.by = 'top_credible_set', size = 3)
jost_mismatch <- ProjectFingerprints(jost_mismatch, 'gene', 'neg', dictionary)
DimPlot(jost_mismatch, group.by = 'gene', reduction = 'projUMAP', label = T)
library(fingerprinting.internal)
library(fingerprinting.data.internal)
library(Seurat)
library(stringr)
options(future.globals.maxSize = 10 * 1024^3)
counts <- ReadMtx(mtx = "/brahms/grabskii/jost_data/GSE132080_10X_matrix.mtx.gz",
cells = "/brahms/grabskii/jost_data/GSE132080_10X_barcodes.tsv.gz",
features = "/brahms/grabskii/jost_data/GSE132080_10X_genes.tsv.gz")
meta_data <- read.csv("/brahms/grabskii/jost_data/GSE132080_cell_identities.csv.gz")
rownames(meta_data) <- meta_data$cell_barcode
jost <- CreateSeuratObject(counts = counts, meta.data = meta_data)
jost <- subset(jost, subset = number_of_cells == 1)
jost <- subset(jost, subset = guide_identity != '*')
jost <- jost[,!is.na(jost$guide_identity)]
jost$gene <- str_extract(jost$guide_identity, "^[^_]+")
jost <- SCTransform(jost, return.only.var.genes = FALSE)
gwps_dictionary <- LoadPrecomputedDictionary(name = 'gwps', gene_key = 'SYMBOL')
jost <- FingerprintCells(jost,
condition_meta = 'gene',
control_class = 'neg',
dictionary = gwps_dictionary,
group_level = TRUE)
group_level_summary <- SummarizeResults(jost, group_level = TRUE,
condition_meta = 'gene',
control_class = 'neg')
print(group_level_summary)
LongIslandCityPlot(jost, query = 'RPS14', condition_meta = 'gene',
control_class = 'neg', dictionary = gwps_dictionary,
group_level = T, cs = 10)
LongIslandCityPlot(jost, query = 'BCR', condition_meta = 'gene',
control_class = 'neg', dictionary = gwps_dictionary,
group_level = T, cs = 10)
LongIslandCityPlot(jost, query = 'RPS14', condition_meta = 'gene',
control_class = 'neg', dictionary = gwps_dictionary,
group_level = T, cs = 10, approx = TRUE)
LongIslandCityPlot(jost, query = 'BCR', condition_meta = 'gene',
control_class = 'neg', dictionary = gwps_dictionary,
group_level = T, cs = 10, approx = TRUE)
ExplainMatch(jost, query = 'BCR', match = 'BCR',
condition_meta = 'gene', control_class = 'neg',
dictionary = gwps_dictionary, group_level = T,
num_genes = 25)
setwd('../../')
setwd('fingerprinting.internal/')
devtools::clean_dll()
devtools::document()
devtools::build()
devtools::install(build_vignettes = TRUE, upgrade = "never")
setwd('../../fingerprinting.internal')
devtools::clean_dll()
devtools::document()
devtools::build()
devtools::install(build_vignettes = TRUE, upgrade = "never")
